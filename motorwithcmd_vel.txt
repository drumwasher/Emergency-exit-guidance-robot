#include <ros.h>
#include <geometry_msgs/Twist.h>
#include <std_msgs/String.h>
#include "math.h"

ros::NodeHandle nh;

float linear_vel = 0.0;
float angular_vel = 0.0;
unsigned long last_cmd_vel = 0;

//right
int Dir1Pin_A=9;
int Dir2Pin_A=8;
int SpeedPin_A=10;

//left
int Dir1Pin_B=4;
int Dir2Pin_B=5;
int SpeedPin_B=6;

int setspeed = 0;

float left_speed = 0;
float right_speed = 0;
int left_direction = 0;
int right_direction = 0;

int minspeed=200;
int maxspeed=240;


void cmd_vel_cb(const geometry_msgs::Twist& msg){
  linear_vel = msg.linear.x;
  angular_vel = msg.angular.z;
  last_cmd_vel = millis();

  // Convert velocity to motor speed and direction
  left_speed = linear_vel - angular_vel;
  right_speed = linear_vel + angular_vel;
  left_direction = (left_speed >= 0) ? HIGH : LOW;
  right_direction = (right_speed >= 0) ? HIGH : LOW;

  //if(abs(left_speed)<minspeed & left_speed !=0) left_speed = minspeed;
  //if(abs(right_speed)<minspeed & right_speed !=0) right_speed = minspeed;
  
  //if(abs(left_speed)>maxspeed & left_speed !=0) left_speed = maxspeed;
  //if(abs(right_speed)>maxspeed & right_speed !=0 ) right_speed = maxspeed;

  // convert linear x and angular z values to left and right motor speed
  
  // map motor speeds to range 230-255
   if (left_speed != 0 ) {
     left_speed = (int) (linear_vel - angular_vel) * 127;
     left_speed = map(left_speed, -127, 127, minspeed, maxspeed);
   }
   if (right_speed != 0) {
     right_speed = (int) (linear_vel + angular_vel) * 127;
     right_speed = map(right_speed, -127, 127, minspeed,maxspeed);
   }
 
}

ros::Subscriber<geometry_msgs::Twist> sub("/cmd_vel", &cmd_vel_cb);

void setup() {
  pinMode(Dir1Pin_A, OUTPUT);
  pinMode(Dir2Pin_A, OUTPUT);
  pinMode(SpeedPin_A, OUTPUT);
  pinMode(Dir1Pin_B, OUTPUT);
  pinMode(Dir2Pin_B, OUTPUT);
  pinMode(SpeedPin_B, OUTPUT);

  nh.getHardware()->setBaud(115200);
  nh.initNode();
  nh.subscribe(sub);

}

void loop() {
  nh.spinOnce();

  // Stop the motors if no velocity command is received
  if (nh.connected() && millis() - last_cmd_vel > 500) {
    left_speed=0;
    right_speed=0;
  }

  // Set motor speed and direction
//  digitalWrite(Dir1Pin_A, !right_direction);
//  digitalWrite(Dir2Pin_A, right_direction);
//  analogWrite(SpeedPin_A, right_speed);
//  
//  digitalWrite(Dir1Pin_B, !left_direction);
//  digitalWrite(Dir2Pin_B, left_direction);
//  analogWrite(SpeedPin_B, left_speed);

  digitalWrite(Dir1Pin_A, !right_direction);
  digitalWrite(Dir2Pin_A, right_direction);
  analogWrite(SpeedPin_A, right_speed);
  
  digitalWrite(Dir1Pin_B, !left_direction);
  digitalWrite(Dir2Pin_B, left_direction);
  analogWrite(SpeedPin_B, left_speed);

  
}